# AlgoItny Environment Variables Configuration
# Copy this file to .env and fill in your actual values
# NEVER commit .env file to version control!

# ======================
# Django Core Settings
# ======================

# SECURITY WARNING: Generate a new secret key for production!
# Generate with: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
SECRET_KEY=your-super-secret-key-change-this-in-production

# SECURITY WARNING: Don't run with debug turned on in production!
DEBUG=False

# Django settings module (use settings_production for production)
DJANGO_SETTINGS_MODULE=config.settings_production

# Comma-separated list of allowed hosts
# Example: api.testcase.run,testcase.run,www.testcase.run
ALLOWED_HOSTS=api.testcase.run,localhost,127.0.0.1

# ======================
# Database Configuration
# ======================
# NOTE: This project uses DynamoDB as the primary database.
# SQLite is used as a dummy database for Django's internal requirements only.
# No database configuration is needed for development/production.

# ======================
# Redis Configuration
# ======================

# Enable Redis for caching (true/false)
# When false, uses Django's local memory cache (LocMemCache)
# When true, uses Redis cache (requires django-redis package)
# Recommended: false for development, true for production
ENABLE_REDIS_CACHE=false

# Redis host (localhost for local, ElastiCache endpoint for AWS)
REDIS_HOST=localhost

# Redis port (default: 6379)
REDIS_PORT=6379

# Redis database number (default: 0)
REDIS_DB=0

# Redis password (leave empty if no password)
REDIS_PASSWORD=

# Redis URL (alternative to individual settings)
# Format: redis://[:password]@host:port/db
REDIS_URL=redis://localhost:6379/0

# ======================
# Celery Configuration
# ======================

# Celery broker URL (usually same as REDIS_URL)
CELERY_BROKER_URL=redis://localhost:6379/0

# Celery result backend (use 'django-db' for database-backed results)
CELERY_RESULT_BACKEND=django-db

# ======================
# Google OAuth
# ======================

# Google OAuth Client ID (from Google Cloud Console)
GOOGLE_CLIENT_ID=your_google_client_id.apps.googleusercontent.com

# Google OAuth Client Secret
GOOGLE_CLIENT_SECRET=your_google_client_secret

# Google OAuth Redirect URI
GOOGLE_OAUTH_REDIRECT_URI=https://api.testcase.run/auth/callback

# ======================
# API Keys
# ======================

# Google Gemini API Key (for AI features)
GEMINI_API_KEY=your_gemini_api_key

# Judge0 API Configuration (optional)
USE_JUDGE0=false
JUDGE0_API_URL=https://judge0-ce.p.rapidapi.com
JUDGE0_API_KEY=your_judge0_api_key

# ======================
# AWS Configuration
# ======================

# AWS Access Key ID (for S3, CloudWatch, etc.)
AWS_ACCESS_KEY_ID=your_aws_access_key_id

# AWS Secret Access Key
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key

# AWS Region
AWS_S3_REGION_NAME=us-east-1

# S3 Bucket Name (for static/media files)
AWS_STORAGE_BUCKET_NAME=algoitny-static

# Use S3 for static/media files (true/false)
USE_S3=false

# AWS Secrets Manager (optional)
USE_SECRETS_MANAGER=false
AWS_SECRET_NAME=algoitny-secrets

# ======================
# CORS Configuration
# ======================

# Comma-separated list of allowed origins for CORS
# Example: https://testcase.run,https://www.testcase.run
CORS_ALLOWED_ORIGINS=https://testcase.run,https://www.testcase.run

# ======================
# Security Settings
# ======================

# Redirect all HTTP to HTTPS (true/false)
SECURE_SSL_REDIRECT=True

# HSTS (HTTP Strict Transport Security) duration in seconds
# 31536000 = 1 year
SECURE_HSTS_SECONDS=31536000

# CSRF Trusted Origins (comma-separated)
# Example: https://api.testcase.run,https://testcase.run
CSRF_TRUSTED_ORIGINS=https://api.testcase.run,https://testcase.run

# ======================
# Application Settings
# ======================

# Code execution timeout in seconds
CODE_EXECUTION_TIMEOUT=5

# Admin URL path (change for additional security)
ADMIN_URL=admin/

# ======================
# Email Configuration
# ======================

# Email backend
EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend

# SMTP server host
EMAIL_HOST=smtp.gmail.com

# SMTP server port (587 for TLS, 465 for SSL)
EMAIL_PORT=587

# Use TLS (true/false)
EMAIL_USE_TLS=True

# SMTP username (usually email address)
EMAIL_HOST_USER=your_email@gmail.com

# SMTP password or app password
EMAIL_HOST_PASSWORD=your_email_password

# Default "from" email address
DEFAULT_FROM_EMAIL=noreply@testcase.run

# Server email (for error notifications)
SERVER_EMAIL=server@testcase.run

# Admin email (for error notifications)
ADMIN_EMAIL=admin@testcase.run

# ======================
# Monitoring & Logging
# ======================

# Sentry DSN (for error tracking, optional)
SENTRY_DSN=

# Environment name (production, staging, development)
ENVIRONMENT=production

# Enable Django Debug Toolbar (only for staging, not production)
ENABLE_DEBUG_TOOLBAR=False

# ======================
# Performance Settings
# ======================

# Gunicorn workers (formula: 2 * CPU + 1)
# For t3.medium (2 vCPU): 4-5 workers
GUNICORN_WORKERS=4
GUNICORN_LOG_LEVEL=info

# Celery worker concurrency
CELERY_WORKER_CONCURRENCY=4

# ======================
# Development Settings
# ======================
# These are only used in development, ignored in production

# Local development settings
DEV_REDIS_URL=redis://localhost:6379/1
DEV_LOCALSTACK_URL=http://localhost:4566

# ======================
# GitHub Actions Secrets
# ======================
# Add these to GitHub repository secrets for CI/CD

# EC2_SSH_PRIVATE_KEY: Your EC2 private key for deployment
# EC2_HOST: Your EC2 instance public IP or domain
# EC2_USER: SSH user (usually 'algoitny' or 'ubuntu')
# AWS_ACCESS_KEY_ID: AWS access key for GitHub Actions
# AWS_SECRET_ACCESS_KEY: AWS secret key for GitHub Actions

# ======================
# Optional Integrations
# ======================

# Slack webhook URL (for deployment notifications)
SLACK_WEBHOOK_URL=

# Discord webhook URL (for deployment notifications)
DISCORD_WEBHOOK_URL=

# New Relic License Key (for APM)
NEW_RELIC_LICENSE_KEY=

# ======================
# Notes
# ======================

# 1. Generate SECRET_KEY:
#    python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"

# 2. For Gmail SMTP, use App Password if 2FA is enabled:
#    https://myaccount.google.com/apppasswords

# 3. DynamoDB Configuration:
#    AWS credentials are used to access DynamoDB
#    Set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
#    Table name is configured in application settings

# 4. ElastiCache Redis URL format:
#    REDIS_HOST=algoitny-redis.xxxxx.cache.amazonaws.com

# 5. Always use HTTPS URLs in production for:
#    - ALLOWED_HOSTS
#    - CORS_ALLOWED_ORIGINS
#    - CSRF_TRUSTED_ORIGINS

# 6. Security Checklist:
#    - Change SECRET_KEY
#    - Set DEBUG=False
#    - Configure ALLOWED_HOSTS
#    - Set strong database passwords
#    - Enable SSL/HTTPS
#    - Configure CORS properly
#    - Set up proper backup strategy
#    - Enable monitoring and logging
