"""Gemini AI Service"""
import json
import google.generativeai as genai
from django.conf import settings


class GeminiService:
    """Handle Gemini AI operations"""

    def __init__(self):
        if settings.GEMINI_API_KEY:
            genai.configure(api_key=settings.GEMINI_API_KEY)
            self.model = genai.GenerativeModel('gemini-pro')
        else:
            self.model = None

    def generate_test_cases(self, problem_info):
        """
        Generate test cases using Gemini API

        Args:
            problem_info: Dict containing:
                - platform: str
                - problem_id: str
                - title: str
                - solution_code: str
                - language: str
                - constraints: str

        Returns:
            list: List of test cases [{'input': str}, ...]

        Raises:
            ValueError: If API key not configured or generation fails
        """
        if not self.model:
            raise ValueError('Gemini API key not configured')

        prompt = f"""You are an expert at creating comprehensive test cases for competitive programming problems.

Problem Details:
- Platform: {problem_info['platform']}
- Problem ID: {problem_info['problem_id']}
- Title: {problem_info['title']}
- Language: {problem_info['language']}

Solution Code:
```{problem_info['language']}
{problem_info['solution_code']}
```

Input Constraints:
{problem_info['constraints']}

Task:
Generate exactly 100 diverse test cases that thoroughly test this solution. The test cases should:

1. **Edge Cases (20 cases)**: Minimum values, maximum values, boundary conditions
2. **Small Cases (30 cases)**: Simple inputs that are easy to verify manually
3. **Medium Cases (30 cases)**: Moderate complexity inputs
4. **Large Cases (20 cases)**: Near-maximum or maximum range inputs to test performance

IMPORTANT FORMAT REQUIREMENTS:
- Return ONLY valid JSON, no markdown, no code blocks, no additional text
- Each test case must have exactly one "input" field (string) and nothing else
- For problems with multiple inputs per line, separate with space
- For problems with multiple lines, use \\n (escaped newline)
- The output will be generated by running the solution code

Return format (ONLY THIS, NO OTHER TEXT):
[
  {{"input": "test case 1 input"}},
  {{"input": "test case 2 input"}},
  ...
]

Generate exactly 100 test cases following the distribution above."""

        try:
            response = self.model.generate_content(prompt)
            text = response.text.strip()

            # Remove markdown code blocks if present
            text = text.replace('```json\\n', '').replace('```json', '')
            text = text.replace('```\\n', '').replace('```', '')
            text = text.strip()

            # Parse JSON
            test_cases = json.loads(text)

            if not isinstance(test_cases, list):
                raise ValueError('Generated test cases is not a list')

            # Validate format
            for tc in test_cases:
                if 'input' not in tc or not isinstance(tc['input'], str):
                    raise ValueError('Invalid test case format')

            return test_cases

        except json.JSONDecodeError as e:
            raise ValueError(f'Failed to parse Gemini response as JSON: {str(e)}')
        except Exception as e:
            raise ValueError(f'Failed to generate test cases: {str(e)}')
