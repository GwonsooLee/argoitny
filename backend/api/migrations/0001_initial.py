# Generated by Django 5.2.7 on 2025-10-07 09:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "max_hints_per_day",
                    models.IntegerField(default=5, help_text="Maximum hints per day"),
                ),
                (
                    "max_executions_per_day",
                    models.IntegerField(
                        default=50, help_text="Maximum code executions per day"
                    ),
                ),
                (
                    "max_problems",
                    models.IntegerField(
                        default=-1, help_text="Maximum problems (-1 for unlimited)"
                    ),
                ),
                (
                    "can_view_all_problems",
                    models.BooleanField(
                        default=True, help_text="Can view all registered problems"
                    ),
                ),
                (
                    "can_register_problems",
                    models.BooleanField(
                        default=False, help_text="Can register new problems"
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "subscription_plans",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "email",
                    models.EmailField(db_index=True, max_length=254, unique=True),
                ),
                ("name", models.CharField(blank=True, max_length=255)),
                ("picture", models.URLField(blank=True)),
                (
                    "google_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="api_users",
                        related_query_name="api_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        related_name="api_users",
                        related_query_name="api_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "subscription_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="api.subscriptionplan",
                    ),
                ),
            ],
            options={
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="Problem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("platform", models.CharField(db_index=True, max_length=50)),
                ("problem_id", models.CharField(db_index=True, max_length=50)),
                ("title", models.CharField(db_index=True, max_length=255)),
                (
                    "problem_url",
                    models.URLField(
                        blank=True, help_text="Full URL to the problem", null=True
                    ),
                ),
                (
                    "tags",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of tags for the problem",
                    ),
                ),
                (
                    "solution_code",
                    models.TextField(
                        blank=True, help_text="Solution code for the problem", null=True
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, null=True
                    ),
                ),
                (
                    "constraints",
                    models.TextField(
                        blank=True,
                        help_text="Input constraints for the problem",
                        null=True,
                    ),
                ),
                (
                    "is_completed",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the problem is completed/registered",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the problem is deleted (soft delete)",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Timestamp when the problem was deleted",
                        null=True,
                    ),
                ),
                (
                    "deleted_reason",
                    models.TextField(
                        blank=True, help_text="Reason for deletion", null=True
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Extensible metadata field for storing additional information (e.g., execution_count, difficulty, etc.)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                "db_table": "problems",
                "indexes": [
                    models.Index(
                        fields=["platform", "problem_id"],
                        name="problem_platform_id_idx",
                    ),
                    models.Index(
                        fields=["platform", "-created_at"],
                        name="problem_platform_created_idx",
                    ),
                    models.Index(
                        fields=["is_completed", "-created_at"],
                        name="problem_completed_created_idx",
                    ),
                    models.Index(
                        fields=["language", "-created_at"],
                        name="problem_language_created_idx",
                    ),
                    models.Index(
                        fields=["is_deleted", "is_completed", "-created_at"],
                        name="problem_deleted_completed_idx",
                    ),
                ],
                "unique_together": {("platform", "problem_id")},
            },
        ),
        migrations.CreateModel(
            name="ScriptGenerationJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("platform", models.CharField(db_index=True, max_length=50)),
                ("problem_id", models.CharField(db_index=True, max_length=50)),
                ("title", models.CharField(max_length=255)),
                ("problem_url", models.URLField(blank=True, null=True)),
                ("tags", models.JSONField(blank=True, default=list)),
                ("solution_code", models.TextField(blank=True, null=True)),
                ("language", models.CharField(max_length=50)),
                ("constraints", models.TextField()),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("script_generation", "Script Generation"),
                            ("problem_extraction", "Problem Extraction"),
                        ],
                        db_index=True,
                        default="script_generation",
                        max_length=30,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                    ),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True, db_index=True, max_length=255, null=True
                    ),
                ),
                ("generator_code", models.TextField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "script_generation_jobs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["job_type", "-created_at"], name="sgj_type_created_idx"
                    ),
                    models.Index(
                        fields=["status", "-created_at"], name="sgj_status_created_idx"
                    ),
                    models.Index(
                        fields=["platform", "problem_id"],
                        name="sgj_platform_problem_idx",
                    ),
                    models.Index(fields=["celery_task_id"], name="sgj_task_id_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="TaskResult",
            fields=[
                (
                    "task_id",
                    models.CharField(
                        db_index=True,
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("STARTED", "Started"),
                            ("PROGRESS", "In Progress"),
                            ("SUCCESS", "Success"),
                            ("FAILURE", "Failure"),
                            ("RETRY", "Retry"),
                            ("REVOKED", "Revoked"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=50,
                    ),
                ),
                (
                    "result",
                    models.JSONField(
                        blank=True,
                        help_text="Task result or error information",
                        null=True,
                    ),
                ),
                (
                    "traceback",
                    models.TextField(
                        blank=True, help_text="Exception traceback if failed", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "task_results",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["status", "-created_at"], name="tr_status_created_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="TestCase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("input", models.TextField()),
                ("output", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_cases",
                        to="api.problem",
                    ),
                ),
            ],
            options={
                "db_table": "test_cases",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="UsageLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("hint", "Hint Request"),
                            ("execution", "Code Execution"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional context about the action",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "problem",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="usage_logs",
                        to="api.problem",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "usage_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SearchHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "user_identifier",
                    models.CharField(
                        db_index=True, default="anonymous", max_length=100
                    ),
                ),
                ("platform", models.CharField(db_index=True, max_length=50)),
                ("problem_number", models.CharField(max_length=50)),
                ("problem_title", models.CharField(max_length=255)),
                ("language", models.CharField(db_index=True, max_length=50)),
                ("code", models.TextField()),
                ("result_summary", models.JSONField()),
                ("passed_count", models.IntegerField()),
                ("failed_count", models.IntegerField()),
                ("total_count", models.IntegerField()),
                ("is_code_public", models.BooleanField(db_index=True, default=False)),
                (
                    "test_results",
                    models.JSONField(
                        blank=True, help_text="Detailed test case results", null=True
                    ),
                ),
                (
                    "hints",
                    models.JSONField(
                        blank=True,
                        help_text="AI-generated hints to help user solve the problem (array of hint strings)",
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Extensible metadata field for storing additional information (e.g., execution time, memory usage, etc.)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_history",
                        to="api.problem",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="search_history",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "search_history",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "-created_at"], name="sh_user_created_idx"
                    ),
                    models.Index(
                        fields=["is_code_public", "-created_at"],
                        name="sh_public_created_idx",
                    ),
                    models.Index(
                        fields=["user_identifier", "-created_at"],
                        name="sh_userident_created_idx",
                    ),
                    models.Index(
                        fields=["problem", "-created_at"], name="sh_problem_created_idx"
                    ),
                    models.Index(
                        fields=["platform", "-created_at"],
                        name="sh_platform_created_idx",
                    ),
                    models.Index(
                        fields=["language", "-created_at"],
                        name="sh_language_created_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_active", "-created_at"], name="user_active_created_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["subscription_plan", "is_active"], name="user_plan_active_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="testcase",
            index=models.Index(
                fields=["problem", "created_at"], name="test_cases_problem_c02b9c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usagelog",
            index=models.Index(
                fields=["user", "action", "-created_at"],
                name="ul_user_action_created_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="usagelog",
            index=models.Index(
                fields=["user", "action", "created_at"], name="ul_user_action_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usagelog",
            index=models.Index(
                fields=["problem", "-created_at"], name="ul_problem_created_idx"
            ),
        ),
    ]
